<?php

/**
 * Implements hook_libraries_info().
 * Return information about external libraries.
 *
 */
function hopscotch_libraries_info() {
  $libraries['hopscotch'] = array(
    'name' => 'Hopscotch',
    'vendor url' => 'http://linkedin.github.io/hopscotch/',
    'download url' => 'https://github.com/linkedin/hopscotch',
    'version arguments' => array(
      'file' => 'js/hopscotch.min.js',
      'pattern' => '/hopscotch - v([\d][\d\.\0]+)/',
      'lines' => 1,
    ),
    'files' => array(
      'js' => array(
        'js/hopscotch.min.js',
      ),
      'css' => array(
        'css/hopscotch.min.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_init().
 * Perform setup tasks for non-cached page requests.
 *
 */
function hopscotch_init() {
  $active_tours = hopscotch_get_path_tours();
  hopscotch_add_tours($active_tours);
}


/**
 *  Checks if any tour is active on a given path.
 *  
 */
function hopscotch_get_path_tours() {
  $tours = hopscotch_load_all();
  dpm($tours);
  $active_tours = array();
  foreach($tours as $name => $tour) {
    if($tour['enabled']) {
      foreach($tour['paths'] as $path) {
        if ($path == current_path() || $path == request_path() || ($path == '<front>' && request_path() == '')) {
          $active_tours[$name] = $tour;
        }
      }
    }
  }
  return $active_tours;
}


/**
 *  Adds necessary javascript to the page to run a tour.
 *  
 */
function hopscotch_add_tours($active_tours) {  
  $library = libraries_load('hopscotch');

  $library_loaded = $library && !empty($library['loaded']);
  backdrop_add_library('system', 'jquery.cookie');

  $js_name = 'js/hopscotch.min.js';
  $base_path = './libraries/hopscotch';

  if (!$library_loaded) {
    backdrop_set_message(t('Can\'t load Hopscotch library. Please download !url  plugin and extract it to @path, so @js can be found at @full_path. Also please purge version info from Hopscotch file names (both .js and .css)', array(
      '!url' => l(t('Hopscotch'), 'https://github.com/linkedin/hopscotch'),
      '@path' => $base_path,
      '@js' => $js_name,
      '@full_path' => $base_path . '/' . $js_name,
    )), 'error');
    return FALSE;
  }

  $tours = array();
  foreach($active_tours as $tour_name => $tour) {
    // Tour settings defaults
    $tour_options = array(
      'showPrevButton' => TRUE,
    );
    // Allow other modules to alter the tour.
    backdrop_alter('hopscotch_tour', $tour, $tour_options);

    // Merge the values of the optional fields directly to the tour steps.
    foreach($tour['content'] as $key => $content) {
      $tour['content'][$key] = array_merge($content, $content['optional']);
      unset($tour['content'][$key]['optional']);
    }
    foreach($tour_options as $setting => $option) {
      $hopper[$setting] = $option;
    }
    $hopper['id'] = $tour_name;
    $hopper['steps'] = $tour['content'];
    $tours[$tour_name]['hopper'] = $hopper;
    $tours[$tour_name]['auto_start'] = $tour['auto_start'];
  }
  
  backdrop_add_js(backdrop_get_path('module', 'hopscotch') . '/inc/js/hopscotch_context.js', array('scope' => 'footer', 'weight' => 5));
  backdrop_add_css(backdrop_get_path('module', 'hopscotch') . '/inc/hopscotch_context.css');
  
  $js_settings = array(
    'hopscotchContext' => array(
      'tours' => $tours,
    ),
  );
  backdrop_add_js($js_settings, 'setting');
}

/**
 * Callback function for loading all tours.
 */
function hopscotch_load_all() {
  $tours = &backdrop_static(__FUNCTION__);
  if (!isset($tours)) {
    if ($cache = cache_get('hopscotch_tours')) {
      $tours = $cache->data;
    }
    else {
      // Find all modules providing tours.
      $all_tours = config_get_names_with_prefix('hopscotch');
      $tours = array();
      // Go through and load each config
      foreach($all_tours as $tour) {
        $config = config($tour);
        $data = $config->get();
        $tours[$data['machine_name']] = $data;
      }
      cache_set('hopscotch_tours', $tours, 'cache');
    }
  }
  return $tours;
}

/**
 * Callback function for loading one tour by $name.
 */
function hopscotch_load($name) {
  $tours = hopscotch_load_all();
  if(isset($tours[$name])) {
    return $tours[$name];
  }
  return array();
}

/**
 * Implements hook_theme().
 *
 */
function hopscotch_theme($existing, $type, $theme, $path) {
  return array(
    'hopscotch_start_link' => array(
      'variables' => array('link_title' => NULL, 'options' => array(), 'tour_name' => NULL),
      'template' => 'templates/hopscotch-start-link',
      'file' => 'inc/hopscotch.theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 * Define all blocks provided by the module.
 *
 */
function hopscotch_block_info() {
  $blocks['hopscotch_start_link'] = array(
    'info' => t('Available tours'),
    'description' => t('Provides a list of themed start links for Hopscotch tours.')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Return a rendered or renderable view of a block.
 *
 */
function hopscotch_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'hopscotch_start_link':
      $block['subject'] = 'Available tours';
      $block['content'] = hopscotch_block_view_build();
      break;
  }
  return $block;
}

/**
 * Return a list of links for the block.
 *
 */
function hopscotch_block_view_build() {
  $active_tours = hopscotch_get_path_tours();
  $links = array();
  foreach($active_tours as $tour) {
    $links[] = theme('hopscotch_start_link', array('tour_name' => $tour['machine_name'], 'link_title' => $tour['title']));
  }
  if($links) {
    return theme('item_list', array('items' => $links));
  }
  return '';
}
