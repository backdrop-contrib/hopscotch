<?php

// add enabled to defaults

/**
 * Implements hook_menu().
 *
 * @see
 */
function hopscotch_ui_menu() {
  $items = array();

  $items['admin/config/user-interface/hopscotch'] = array(
    'title' => 'Hopscotch',
    'page callback' => 'hopscotch_ui_list_hopscotch_tours',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/user-interface/hopscotch/ui'] = array(
    'title' => 'Hopscotch UI',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/config/user-interface/hopscotch/ui/%'] = array(
    'title' => 'Tour editor',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('hopscotch_ui_edit_hopscotch', 5),
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/user-interface/hopscotch/ui/%/clone'] = array(
    'title' => 'Clone tour',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('hopscotch_ui_edit_hopscotch', 5, 6),
    'access arguments' => array('access administration pages'),
  );
	$items['admin/config/user-interface/hopscotch/ui/%/disable'] = array(
		'title' => 'Disable tour',
		'page callback' => 'backdrop_get_form',
		'page arguments' => array('hopscotch_ui_disable_hopscotch', 5, 6),
    'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	);  
	$items['admin/config/user-interface/hopscotch/ui/%/revert'] = array(
		'title' => 'Disable tour',
		'page callback' => 'backdrop_get_form',
		'page arguments' => array('hopscotch_ui_disable_hopscotch', 5, 6),
    'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	);  
  $items['admin/config/user-interface/hopscotch/ui/add'] = array(
    'title' => 'Add new tour',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('hopscotch_ui_edit_hopscotch', 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/config/user-interface/hopscotch/demo'] = array(
    'title' => 'Hopscotch Demo (Start tour automatically)',
    'page callback' => 'theme',
    'page arguments' => array('hopscotch_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/user-interface/hopscotch/demo/auto-start'] = array(
    'title' => 'Hopscotch Demo (Start tour automatically)',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/user-interface/hopscotch/demo/manual-trigger'] = array(
    'title' => 'Hopscotch Demo (Use manual trigger to start tour)',
    'page callback' => 'theme',
    'page arguments' => array('hopscotch_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback.
 * Returns an administrative overview of all tours.
 *
 */
function hopscotch_ui_list_hopscotch_tours() {
  $items = hopscotch_load_all();
  $rows = array();
  foreach ($items as $name => $item) {
    if ($item['storage'] === HOPSCOTCH_STORAGE_DEFAULT) {
      $storage = t('Default');
      $delete_link = '';
    }
    elseif ($item['storage'] === HOPSCOTCH_STORAGE_OVERRIDE) {
      $storage = t('Overridden');
      $delete_link = t('Revert');
    }
    elseif ($item['storage'] === HOPSCOTCH_STORAGE_NORMAL) {
      $storage = t('User-provided');
      $delete_link = t('Delete');
    }
    $links = array();
    
    if ($item['editable']) {
      $links['edit'] = array(
        'title' => t('Edit'),
        'href' => 'admin/config/user-interface/hopscotch/ui/' . $name,
      );
    }
    $links['disable'] = array(
      'title' => $item['enabled'] ? t('Disable') : t('Enable'),
      'href' => 'admin/config/user-interface/hopscotch/ui/' . $name . '/disable',
    );
    $links['clone'] = array(
      'title' => 'Clone',
      'href' => 'admin/config/user-interface/hopscotch/ui/' . $name . '/clone',
    );
    $links['delete'] = array(
      'title' => $delete_link,
      'href' => 'admin/config/user-interface/hopscotch/ui/' . $name . '/revert',
    );

    $dropbutton = array(
      '#type' => 'dropbutton',
      '#links' => $links,
    );

    $row['title'] = $item['title'];
    $row['description'] = $item['description'];
    $row['auto_start'] = $item['auto_start'] ? 'TRUE' : 'FALSE';
    $row['storage'] = $storage;
    $row['operations'] = backdrop_render($dropbutton);
    $rows[] = $row;
  }
  if (!empty($rows)) {
    $header = array(
      t('Title'),
      t('Description'),
      t('Autostart'),
      t('Status'),
      t('Operations'),
    );
    $output = theme('table', array('header' => $header, 'rows' => $rows));
    return $output;
  }
  else {
    return t('There are no tours.');
  }
}

/**
 * Menu callback.
 * Returns the confirm form to disable a tour.
 *
 */
function hopscotch_ui_disable_hopscotch($form, &$form_state, $name, $op) {
  $tour = hopscotch_load($name);
	$form = array();
	$form['tour'] = array(
		'#type' => 'value',
		'#value' => $tour,
	);
	$form['operation'] = array(
		'#type' => 'value',
		'#value' => $op,
	);
  if ($op == 'disable') {
    $set_enabled_status = $tour['enabled'] ? t('disable') : t('enable');
  }
  elseif ($op == 'revert') {
    $set_enabled_status = ($tour['storage'] === HOPSCOTCH_STORAGE_OVERRIDE) ? t('revert') : t('delete');
  }
  return confirm_form(
    $form,
    t("Are you sure you want to !disable this tour?", array('!disable' => $set_enabled_status)),
    'admin/config/user-interface/hopscotch',
    t(''),
    t('!disable', array('!disable' => $set_enabled_status)),
    t('Cancel')
  );
}

/**
 * Submit handler for hopscotch_ui_disable_hopscotch.
 * This function is invoked only when the user clicks confirm button
 * clicking on cancel, the user goes back to the $path.
 */
function hopscotch_ui_disable_hopscotch_submit($form, &$form_state) {
  $tour = $form['tour']['#value'];
  $op = $form['operation']['#value'];
  
  if ($op == 'revert') {
    hopscotch_ui_process_hopscotch_delete($form, $form_state);
  }
  else {
    $set_enabled_status = $tour['enabled'] ? 0 : 1;
    $config = config('hopscotch.' . $tour['module'] . '.' . $tour['machine_name']);
    $config->set('enabled', $set_enabled_status);
    $config->save();
    backdrop_set_message('Tour ' . $tour['title'] . ' settings saved.');
  }

  cache_flush('cache');
	$form_state['redirect'] = 'admin/config/user-interface/hopscotch';
}

/**
 * Submit handler for hopscotch_ui_disable_hopscotch if delete/revert requested.
 */
function hopscotch_ui_process_hopscotch_delete($form, &$form_state) {
  $tour = $form['tour']['#value'];
  $tour_config = 'hopscotch.' . $tour['module'] . '.' . $tour['machine_name'];
  config($tour_config)->delete();
  if ($tour['storage'] === HOPSCOTCH_STORAGE_OVERRIDE) {
    // Restore the module-provided config.
    config_install_default_config($tour['module'], $tour_config);
    backdrop_set_message('Tour ' . $tour['title'] . ' has been reverted.');
  }
  else {
    backdrop_set_message('Tour ' . $tour['title'] . ' was deleted.');
  }
}

/**
 * Returns a form to edit a tour.
 *
 */
function hopscotch_ui_edit_hopscotch($form, &$form_state, $name, $op = NULL) {
  $form['#tree'] = TRUE;
  
  $tour = array();
  if($name && $tour = hopscotch_load($name)) {
    if ($op && $op == 'clone') {
      backdrop_set_title(t('Cloning ') . $tour['title']);
      $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => isset($tour['title']) ? t('Clone of '). $tour['title'] : '',
      );
      $form['machine_name'] = array(
        '#type' => 'machine_name',
        '#default_value' => $tour['machine_name'] . '_clone',
        '#maxlength' => 21,
        '#machine_name' => array(
          'exists' => 'hopscotch_machine_name_exists',
          'source' => array('title'), 
        ),
      );
    }
    else {
      backdrop_set_title($tour['title']);
      $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => isset($tour['title']) ? $tour['title'] : '',
      );
      $form['machine_name'] = array(
        '#type' => 'value',
        '#value' => $tour['machine_name'],
      );
    }
    $form['module'] = array(
      '#type' => 'value',
      '#value' => $tour['module'],
    );
    $form['editable'] = array(
      '#type' => 'value',
      '#value' => $tour['editable'],
    );
  }
  elseif($name =='add') {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($tour['title']) ? $tour['title'] : '',
    );
    $form['machine_name'] = array(
      '#type' => 'machine_name',
      '#default_value' => '',
      '#maxlength' => 21,
      '#machine_name' => array(
        'exists' => 'hopscotch_machine_name_exists',
        'source' => array('title'), 
      ),
    );
    $form['editable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Editable'),
      '#default_value' => 1,
    );
  }
  else {
    return array();
  }
  
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $name,
  );
  $form['op'] = array(
    '#type' => 'value',
    '#value' => $op,
  );
  $form['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths'),
    '#rows' => 3,
    '#default_value' => isset($tour['paths']) ? implode("\n", $tour['paths']) : '',
    '#description' => t('Enter one path per line, for example "node/1" or @front for the front page.', array('@front' => '<front>')),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 3,
    '#default_value' => isset($tour['description']) ? $tour['description'] : '',
  );
  $form['auto_start'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Start'),
    '#default_value' => isset($tour['auto_start']) ? $tour['auto_start'] : '',
  );
  $form['play_once'] = array(
    '#type' => 'checkbox',
    '#title' => t('Play Once'),
    '#default_value' => isset($tour['play_once']) ? $tour['play_once'] : '',
  );
  $form['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($tour['enabled']) ? $tour['enabled'] : 1,
  );
  $form['content'] = array(
    '#type' => 'fieldset',
    '#title' => t('People coming to the picnic'),
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="steps-fieldset-wrapper">',
    '#suffix' => '</div>',
  );
  if (empty($form_state['content'])) {
    if($name == 'add') {
      $form_state['content'][0] = hopscotch_ui_get_default_step();
    }
    else {
      $form_state['content'] = $tour['content'];
    }
  }
  
  foreach ($form_state['content'] as $i => $step) {
    $form['content'][$i]['title'] = array(
      '#type' => 'textfield',
      '#size' => 20,
      '#title' => t('Tip title'),
      '#default_value' => isset($step['title']) ? $step['title'] : '',
    );
    $form['content'][$i]['content'] = array(
      '#type' => 'textarea',
      '#title' => t('Tip content'),
      '#rows' => 2,
      '#default_value' => isset($step['content']) ? $step['content'] : '',
    );
    $form['content'][$i]['target'] = array(
      '#size' => 20,
      '#type' => 'textfield',
      '#title' => t('Target'),
      '#default_value' => isset($step['target']) ? $step['target'] : '',
    );
    $form['content'][$i]['placement'] = array(
      '#type' => 'select',
      '#title' => t('Placement'),
      '#options' => backdrop_map_assoc(array('top', 'bottom', 'right', 'left')),
      '#default_value' => isset($step['placement']) ? $step['placement'] : '',
    );
    $form['content'][$i]['optional'] = array(
      '#type' => 'textarea',
      '#title' => t('Optional fields'),
      '#rows' => 4,
      '#default_value' => isset($step['optional']) && !empty($step['optional']) ? _rebuild_step_options($step['optional']) : '',
      '#description' => t('Enter one key:value per line, for example "xOffset: 15" (without the quotes)'),
    );
    $form['content'][$i]['query_selector'] = array(
      '#type' => 'checkbox',
      '#title' => t("Use 'document.querySelector()'"),
      '#default_value' => isset($step['query_selector']) ? $step['query_selector'] : 0,
    );
    $form['content'][$i]['query_selector_index'] = array(
      '#type' => 'textfield',
      '#size' => 4,
      '#maxlength' => 3,
      '#default_value' => isset($step['query_selector_index']) ? $step['query_selector_index'] : 0,
      '#description' => t('Enter the querySelector index'),
    );
    $form['content'][$i]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => isset($step['weight']) ? $step['weight'] : 10,
      '#delta' => 10,
      '#title_display' => 'invisible',
    );
    $form['content'][$i]['delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
      '#default_value' => 0,
    );
  }
  $form['content']['add_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('hopscotch_ui_add_one'),
    '#limit_validation_errors' => array(), 
    // '#ajax' => array(
      // 'callback' => 'hopscotch_ui_add_more_callback',
      // 'wrapper' => 'steps-fieldset-wrapper',
    // ),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save Changes'));
  return $form;
}

/**
 * Render API callback: Checks if a field machine name is taken.
 *
 * @param $value
 *   The machine name, not prefixed with 'field_'.
 *
 * @return
 *   Whether or not the field machine name is taken.
 */
function hopscotch_machine_name_exists($value) {
  $tours = hopscotch_load_all();
  return isset($tours[$value]);
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function hopscotch_ui_add_more_callback($form, $form_state) {
  // Doesnt work
  return $form['content'];
}

/**
 * Callback for both populating step options textareas.
 *
 * Rebuilds options in the format 'stepOption:value'.
 */
function _rebuild_step_options($optionals) {
  $lines = array();
  foreach($optionals as $key => $option) {
    $lines[] = $key . ':' . $option;
  }
  return implode("\n", $lines);
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function hopscotch_ui_add_one($form, &$form_state) {
  $max_weight = hopscotch_ui_max_weight($form_state['content']);
  $form_state['content'][] = hopscotch_ui_get_default_step($max_weight);
  $form_state['rebuild'] = TRUE;
}

function hopscotch_ui_max_weight($content) {
  $weights = array();
  foreach($content as $step) {
    $weights[] = $step['weight'];
  }
  return max($weights);
}
function hopscotch_ui_get_default_step($max_weight = 0) {
  return array (
    'title' => '',
    'content' => '',
    'target' => '',
    'placement' => '',
    'optional' => '',
    'weight' => $max_weight + 1,
  );
}

/**
 * Form validation handler for hopscotch_ui_edit_hopscotch().
 *
 * @see hopscotch_ui_edit_hopscotch_submit().
 */
function hopscotch_ui_edit_hopscotch_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  
  unset($form_state['values']['actions']);
  
  // Cleanup multiline textareas
  $paths = hopscotch_ui_format_lines($form_state['values']['paths']);
  
  // Validate paths
  foreach($paths as $path) {
    if(!menu_get_item($path) && $path != '<front>'){
      form_set_error('paths', t('The path @path is invalid.', array('@path' => $path)));
    }
  }
  $form_state['values']['paths'] = $paths;
  
  if(is_null($form_state['values']['content']) || (count($form_state['values']['content']) == 1 && $form_state['values']['content'][0]['delete'] == 1)) {
    form_set_error('form', 'No steps to save');
  }
  
  foreach($form_state['values']['content'] as $key => $content) {
    // Validate the optional settings textarea. Settings are input as one 
    // key:value pair per line. We need to separate each line, then convert the 
    // key:value string into array key and value.
    
    // First split the lines.
    $optionals = hopscotch_ui_format_lines($form_state['values']['content'][$key]['optional']);
    $options = array();
    // If we got some lines, now split the pairs, using ":" as the delimiter
    if($optionals) {
      foreach($optionals as $option) {
        $split = explode(":", $option, 2);
        if(isset( $split[1])) {
          $options[$split[0]] = $split[1];
        }
        else {
          // If the split didnt return a value then the delimiter was missing,
          // or something else equally tragic. We bail out here.
          form_set_error('optional', 'One or more of your optional settings are invalid.');
        }
      }
    }
    $form_state['values']['content'][$key]['optional'] = $options;
    
    if(!$content['content'] && !$content['title']) {
      form_set_error('content', 'Steps must have a content or a title or both.');
    }

    if($content['delete']) {
      unset($form_state['values']['content'][$key]);
    }

    unset($form_state['values']['content'][$key]['delete']);
  }
} 

/**
 * Form submission handler for hopscotch_ui_edit_hopscotch().
 *
 * @see hopscotch_ui_edit_hopscotch_validate().
 */
function hopscotch_ui_edit_hopscotch_submit($form, &$form_state) {  
  $name = $form_state['values']['name'];
  $op = $form_state['values']['op'];
  unset($form_state['values']['name']);
  backdrop_sort($form_state['values']['content'], array('weight' => SORT_NUMERIC));
  $form_state['values']['content'] = array_values($form_state['values']['content']);
  $data = $form_state['values'];
  $tour = array();
  
  // This is a new tour being added.
  if($name == 'add') {
    $data['storage'] = HOPSCOTCH_STORAGE_NORMAL;
    $config = config('hopscotch.hopscotch.' . $form_state['values']['machine_name']);
    $config->setData($data);
    $config->save();
  }
  else {
    // Rebuild the config name in case we're cloning.
    $config_name = 'hopscotch.' . $form_state['values']['module'] . '.' . $form_state['values']['machine_name'];

    // If cloning, this becomes a  user-provided tour.
    if ($op == 'clone') {
      $data['storage'] == HOPSCOTCH_STORAGE_NORMAL;
    }
    elseif ($data['storage'] == HOPSCOTCH_STORAGE_DEFAULT) {
      $data['storage'] == HOPSCOTCH_STORAGE_OVERRIDE;
    }

    $config = config($config_name);
    $config->setData($data);
    $config->save();
  }
  cache_flush('cache');
  $form_state['redirect'] = 'admin/config/user-interface/hopscotch/ui';
}

/**
 * Cleans up input from multiline textareas.
 *
 */
function hopscotch_ui_format_lines($text) {  
  // Cleanup text
  $text = explode("\n", $text);
  $text = array_map('trim', $text);
  $text = array_filter($text, 'strlen');
  return $text;
}

/**
 * Returns HTML for the Hopscotch edit form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_hopscotch_ui_edit_hopscotch($variables) {
  backdrop_add_js(backdrop_get_path('module', 'hopscotch_ui') . '/hopscotch_ui.js');
  backdrop_add_css(backdrop_get_path('module', 'hopscotch_ui') . '/css/hopscotch_ui.css');
  $form = $variables['form'];
  $rows = array();
  $output = '';
  $output .= backdrop_render($form['title']);
  if(isset($form['machine_name'])) {
    $output .= backdrop_render($form['machine_name']);
  }
  $output .= backdrop_render($form['paths']);
  $output .= backdrop_render($form['description']);
  $output .= backdrop_render($form['enabled']);
  $output .= backdrop_render($form['editable']);
  $output .= backdrop_render($form['auto_start']);
  $output .= backdrop_render($form['play_once']);
  
  $add_more = $form['content']['add_more'];
  unset($form['content']['add_more']);
  
  foreach (element_children($form['content']) as $id) {

    $form['content'][$id]['weight']['#attributes']['class'] = array('hopscotch-ui-weight');
    $rows[] = array(
      'data' => array(
        theme('hopscotch_content_row', $form['content'][$id]),
        backdrop_render($form['content'][$id]['delete']),
        backdrop_render($form['content'][$id]['weight']),
      ),
      'class' => array('draggable'),
    );
  }
  unset($form['content']);

  $header = array(t('Steps'), t('Delete'), t('Weight'));

  $table_id = 'hopscotch-content';

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));
  $output .= backdrop_render($add_more);
  $output .= backdrop_render_children($form);

  backdrop_add_tabledrag($table_id, 'order', 'sibling', 'hopscotch-ui-weight');

  return $output;
}

/**
 * Returns HTML for a single step in the Hopscotch edit form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_hopscotch_content_row($content) {
    $row['title'] = backdrop_render($content['title']). backdrop_render($content['target']);
    $row['content'] = backdrop_render($content['content']);
    $row['placement'] = backdrop_render($content['placement']);
    $rows = array($row);

    if (!empty($rows)) {
    $header = array();
    $output = theme('table', array(
      'header' => $header, 
      'rows' => $rows,
      'attributes' => array('class' => 'hopscotch-content-row'),
      )
    );
    
    $attributes = backdrop_render($content['optional']);
    $attributes .= backdrop_render($content['query_selector']);
    $attributes .= backdrop_render($content['query_selector_index']);
    
    $toggle = ' <a class="requirements-toggle" href="#">' . t('more') . '</a>';
    $details = '<div class="text table-filter-text-source"> ' . $toggle . '</div>' . '<div class="requirements">' . $attributes . '</div>';

    $output .= $details;
    return $output;
  }
  else {
    return t('There are no items in the queue.');
  }
}

/**
 * Implements hook_theme().
 *
 */
function hopscotch_ui_theme() {
  return array(
    // Theme function for the 'simple' example.
    'hopscotch_ui_edit_hopscotch' => array(
      'render element' => 'form',
    ),
    'hopscotch_content_row' => array(
      'render element' => NULL,
    ),
    'hopscotch_demo' => array(
      'variables' => array(),
      'template' => 'templates/hopscotch-demo',
    ),
  );
}

 /**
 * Implements hook_config_info().
 * Provides two tour files: one with default tours for demo purposes and one 
 * which is blank, for storing user-created tours.
 */
function hopscotch_ui_config_info() {
  $prefixes['hopscotch.hopscotch_ui.auto_start'] = array(
    'label' => t('Hopscotch Default Tour - Autostart'),
    'group' => t('Hopscotch'),
  );
  $prefixes['hopscotch.hopscotch_ui.manual_trigger'] = array(
    'label' => t('Hopscotch Custom Tour- Manual trigger'),
    'group' => t('Hopscotch'),
  );
  return $prefixes;
}
